---
title: "HW 01"
author: "Joey Garcia"
format: html
---

## 0 - Setup

```{r setup}
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
# pacman::p_load() 

if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
    library(gridExtra)

devtools::install_github("tidyverse/dsbox")

library('tidyverse')
library('lubridate')
library('glue')
library('scales')
library('dplyr')
library('ggthemes')

library('ggrepel')
library('gridExtra')
library('grid')

library('openintro')

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)

```

## 1 - Road traffic accidents in Edinburgh

```{r Traffic accidents import and data glimpse}

accidents <- read.csv("data/accidents.csv")

glimpse(accidents)

unique(accidents$day_of_week)
unique(accidents$severity)


```

```{r Accidents-density-plot}

# Identify weekends and weekday & convert time into numerical values
accidents <- accidents |>
  mutate(
    # Identify Weekends
    in_weekend = case_when(
      day_of_week %in% c('Saturday', 'Sunday') ~ 1,
      TRUE ~ 0
    ),
    day_type = if_else(in_weekend == 1, "Weekend", "Weekday"), 
    
    # Convert time into a numerical value for density plot
    time_parsed = parse_date_time(time, orders = 'HMS'), # parse by Hour:Min:Sec
    time_decimal = hour(time_parsed) + minute(time_parsed) / 60 + second(time_parsed) / 3600
  )

# Density plot of accident severity throughout a day
accidents |>
  ggplot(aes(x=time_decimal, fill = severity)) +
  geom_density(alpha= 0.6) +
  facet_wrap(~day_type, ncol = 1) +
  scale_x_continuous(breaks = seq(0, 24, by = 2)) +
  scale_color_colorblind() +
  labs(
    x = "Time of day (Hours)",
    y = "Density",
    color = NULL, linetype = NULL,
    title = "Number of accidents throughout the day",
    subtitle = "By day of week and severity"
    ) +
  theme_minimal()

```

## 2 - NYC marathon winners

```{r NYC Marthon winner import and data wrangling}

marathon <- read.csv('data/nyc_marathon.csv')
glimpse(marathon)

sum(is.na(marathon$time)) # counts NA rows

marathon <- marathon |>
  drop_na(time_hrs, )
glimpse(marathon)

summary(marathon)

```

### (A)

In the histogram, it's apparent that there are 2 major inflection points in the dataset, this difference is what separates the times between the Men and Women divisions. In the boxplot, we are able to see the median value and outliers of the dataset.

```{r NYC Marthon winner histogram}



marathon |>
  ggplot(aes(x=time_hrs)) +
  geom_histogram(binwidth = 0.1, fill='cornsilk2') +
  labs(
    x= 'Finish Time (Hours)', 
    y= 'Count',
    title = 'Marathon Finish Times', 
    subtitle = 'Histogram of all divisions'
  ) +
  theme_minimal()
```

```{r NYC Marthon winner boxplot}

marathon |>
  ggplot(aes(y=time_hrs)) +
  geom_boxplot(alpha=0.6, fill='skyblue') +
  labs(
    y= 'Finish Time (Hours)',
    title = 'Marathon Finish Times', 
    subtitle = 'Boxplot of all divisions'
  ) +
  theme_minimal()

```

### (B)

When comparing the Men and Women divisions, we can see that the medians of the boxplots are more distinct. There is less variation in time in each boxplot. The Men division has a faster average marathon time than the woman division.

```{r NYC Marthon winner boxplot of Men and Women Divisions}

marathon |>
  ggplot(aes(y=time_hrs, fill = division)) +
  geom_boxplot(alpha=0.6) +
  facet_wrap(~ division) +
  scale_fill_manual(values = c("Men" = "skyblue", "Women" = "cornsilk4")) +
  labs(
    y= 'Finish Time (Hours)',
    title = 'Marathon Finish Times', 
    subtitle = 'Boxplots of Men and Women division', 
    fill = 'Division'
  ) +
  theme_minimal()

```

### (C)

In themes, we are able to remove the legend and the x axis markers. The legend is removed because the boxplot title is more than sufficient for clearly representing the boxplot. The x-axis doesn't have graphical significance in portraying our message of the boxplot.

```{r NYC Marthon winner boxplot of Men and Women Divisions (improved data:ink ratio)}

marathon |>
  ggplot(aes(y=time_hrs, fill = division)) +
  geom_boxplot(alpha=0.6) +
  facet_wrap(~ division) +
  scale_fill_manual(values = c("Men" = "skyblue", "Women" = "cornsilk4")) +
  labs(
    y= 'Finish Time (Hours)',
    title = 'Marathon Finish Times', 
    subtitle = 'Boxplots of Men and Women division', 
    fill = 'Division'
  ) +
  theme_minimal() + 
  theme(
    legend.position = "none",
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  )

```

### (D)

In this line plot, we are able to see the disparity in the two divisions. We are able to visually see a negative trend,indicating that over time, the two divisions are finishing the marathon faster.

```{r Time-Series Marathon Finish Times}

marathon |>
  ggplot(aes(x= year, y= time_hrs, colour = division)) +
  geom_line() +
  geom_point(aes(shape= division), size= 2, alpha= 0.6) +
  scale_color_manual(values = c("Men" = "skyblue", "Women" = "cornsilk4")) +
  labs(
    x= 'Year',
    y= 'Finish Time (Hours)',
    title = 'Marathon Finish Times', 
    subtitle = 'Time-series of Men and Women division'
  ) +
  theme_minimal() 

```

## 3 - US counties

```{r Import OpenIntro county dataset}
data("county")

county <- county |>
  drop_na()

glimpse(county)
summary(county)
```

### (A)

The below code works, but it does a poor job of explaining how the response "median_hh_income" relates to the variable "median_edu". The code adds the box plot and extends the x-axis variables, thus not raising conflicts between the two plots. The y-axis is significantly stretched because the maximum values of pop2017 (max = 10163507) are greater than median_hh_income (max = 129588). All in all, the code works, but the graph does not make sense.

```{r Test randomly concstructed graph}

ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017))

```

### (B)

Of the two figures below, the 2nd figure best compares poverty levels to different median education levels. In the 2nd figure, we are able to distinguish the higher poverty levels per education level. Our choice is critical when picking how we want to facet our graphs. When faceting, this will stretch our graphs in directions that may obscure our data, this will inherently change how our graph's message is perceived.

```{r figure-1}
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(median_edu ~ .)
```

```{r figure 2}
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(. ~ median_edu)
```

### (C)

```{r Plot A}
county |>
  ggplot(aes(x= homeownership, y= poverty)) +
  geom_point() +
  labs(
    title= 'Plot A'
  ) + 
  theme_minimal()
```

```{r Plot B}
county |>
  ggplot(aes(x= homeownership, y= poverty)) +
  geom_point() +
  geom_smooth(se= FALSE) +
  labs(
    title= 'Plot B'
  )
```

```{r Plot C}
county |>
  ggplot(aes(x= homeownership, y= poverty)) +
  geom_point() +
  geom_smooth(aes(colour=metro), se= FALSE) +
  scale_color_manual(values = c("no" = "green", "yes" = "green")) +
  labs(
    title= 'Plot C'
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r Plot D}
county |>
  ggplot(aes(x= homeownership, y= poverty)) +
  geom_smooth(aes(colour=metro), se= FALSE) +
  geom_point() +
  scale_color_manual(values = c("no" = "blue", "yes" = "blue")) +
  labs(
    title= 'Plot D'
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r Plot E}
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  geom_point(aes(colour = metro)) +
  geom_smooth(aes(linetype = metro), colour = "blue", se = FALSE) +
  scale_linetype_manual(name = "metro ", values = c("no" = "solid", "yes" = "dashed")) +
  labs(
    title = 'Plot E'
  ) +
  theme_minimal()+ 
  guides(
    linetype = guide_legend(order = 1)
  )
```

```{r Plot F}
county |>
  ggplot(aes(x= homeownership, y= poverty, colour=metro)) +
  geom_point() +
  geom_smooth(se= FALSE) +
  labs(
    title= 'Plot F'
  ) +
  theme_minimal()
```

```{r Plot G}
county |>
  ggplot(aes(x= homeownership, y= poverty)) +
  geom_point(aes(colour= metro)) +
  geom_smooth(se= FALSE) +
  labs(
    title= 'Plot F'
  ) +
  theme_minimal()
```

```{r Plot H}
county |>
  ggplot(aes(x= homeownership, y= poverty)) +
  geom_point(aes(colour= metro)) +
  labs(
    title= 'Plot H'
  ) +
  theme_minimal()
```

## 4 - Rental apartments in SF

```{r import credit.csv}
credit <- read.csv('data/credit.csv')
glimpse(credit)
summary(credit)
```

### (A)

In all instances, if the person is married or a student, there is a positive trend across all plots. The positive trends indicate the higher the income then the higher the credit card balance.

```{r Credit Card vs. Income Plots}

credit |>
  ggplot(aes(x= income, y= balance, colour = student)) +
  geom_point(aes(shape = student), alpha= 0.6) +
  geom_smooth(method= 'lm', se= FALSE) +
  scale_color_manual(values = c("No" = "skyblue", "Yes" = "red4")) +
  
  scale_x_continuous(labels = label_dollar(suffix = 'K')) +
  scale_y_continuous(labels = label_dollar()) +
  
  facet_grid(
    student ~ married, 
    labeller = labeller(
      student = c('Yes' = 'Student: Yes', 'No' = 'Student: No'),
      married = c('Yes' = 'Married:yes', 'No' = 'Married:No')
    )
  ) +
  
  labs(
    x= 'Income',
    y= 'Credit Card Balance'
  ) +
  
  theme_minimal() +
  theme(
    legend.position = 'none', 
    panel.border = element_rect(colour = 'black', fill= NA, linewidth = 1), 
    strip.background = element_rect(colour = 'black', fill = 'gray', linewidth = 1)
  )

```

### (B)

Based on the plot, the predictors 'income', 'marriage', and 'student' are not strong predictors for figuring out the credit 'balance'. The trends are very similar, the y-intercepts are unique in their subplots, but they generally have the same linear regression line.

Based on the statistical summary below, we can see that the 'student' predictor shows statistical significance with a very small p value less the 0.05. The 'married' predictor has a p-value of 0.948 which indicates that it's statistically less significant. 'student' is a useful predictor.

```{r stats summary of credit.csv}

model_income <- lm(balance ~ income, data = credit)
summary(model_income)
model_full <- lm(balance ~ income + student + married, data = credit)
summary(model_full)

anova(model_income, model_full)
```

### (C)

```{r Credit Utilization vs. Income}

# Data Wrangling
credit <- credit |> 
  mutate(
    credit_utilization = balance / limit
  )

# Credit Utilization vs. Income (incorporating student & marriage predictors)
credit |>
  ggplot(aes(x= income, y= credit_utilization, colour = student)) +
  geom_point(aes(shape = student), alpha= 0.6) +
  geom_smooth(method= 'lm', se= FALSE) +
  scale_color_manual(values = c("No" = "skyblue", "Yes" = "red4")) +
  
  scale_x_continuous(labels = label_dollar(suffix = 'K')) +
  scale_y_continuous(labels = percent) +
  
  facet_grid(
    student ~ married, 
    labeller = labeller(
      student = c('Yes' = 'Student: Yes', 'No' = 'Student: No'),
      married = c('Yes' = 'Married:yes', 'No' = 'Married:No')
    )
  ) +
  
  labs(
    x= 'Income',
    y= 'Credit Utilization'
  ) +
  
  theme_minimal() +
  theme(
    legend.position = 'none', 
    panel.border = element_rect(colour = 'black', fill= NA, linewidth = 1), 
    strip.background = element_rect(colour = 'black', fill = 'gray', linewidth = 1)
  )

```

### (D)

Based on the plot from part (c), we see higher y-intercepts for credit card utilization of students('yes'). Another noticeable change is married and non-married students show a negative trend. This indicates that credit card utilization decreases as income increases for students.

## 5 - Napoleon’s march.

```{r My Unique Napoleon’s march import}

napoleon <- read_rds('data/napoleon.rds')
glimpse(napoleon)

```

```{r Napoleon’s march Troop plot}

breaks <- c(100000, 200000, 300000) # Set scale breaks for 'survivor' var

# Plot Troop movements
plot_troops <- napoleon$troops |>
  ggplot(aes(x= long, y= lat)) +
  # Plot Path of troops
  geom_path(
    aes(size = survivors, colour = direction, group = group),
    lineend="round"
  ) +
  # Scale plot
  scale_size(
    name= "Survivors",
    range = c(0.5,5), #scales 'survivors' path; adjust for legend readability
    breaks=breaks,
    labels=comma(breaks) # from scales library
  ) +
  # Add color to Troops by 'direction'
  scale_color_manual(
    name= "Direction", 
    values = c("goldenrod", "black"),
    labels=c("Advance", "Retreat")
  ) +
  theme_minimal()
plot_troops

```

```{r Napoleon’s march Troop-city plot}

# Plot City names and points over Troops path
plot_troops_cities <- plot_troops +
  # Plot city names and points
  geom_point(
    data = napoleon$cities,
    colour = 'orangered3'
  ) +
  geom_text_repel(
    data = napoleon$cities, 
    aes(label = city),
    colour = 'orangered3',
    family = "serif"
  ) +
  
  # set X axis to match Temperature plot
  coord_cartesian(xlim = c(24, 38)) +
  labs(
    x = NULL,
    y = NULL,
    title = "Napoleon's March",
    subtitle = "1812-13 invasion of Russia, Public Domain"
  ) +
  # disable Legend
  guides(color = FALSE, size = FALSE) +
  theme_minimal() +
  # disable grids
  theme(
    text = element_text(family = "serif"),
    axis.text = element_blank(),
    panel.grid = element_blank()
  )
plot_troops_cities

```

```{r Napoleon’s Temperature plot}
# Plot Temperature path plot
plot_temp <- napoleon$temperatures |>
  # create labels for points
  mutate(
    label = paste0(temp, "°, ", month, ".", day)
  ) |>
  # Temperature path based on Longitude
  ggplot(aes(long, temp)) +
  geom_path(color= "grey", linewidth= 1.5) +
  geom_point(size= 1) +
  geom_text_repel(aes(label= label), size = 2.5) +
  
  # set X axis similar to troop_city plot
  coord_cartesian(xlim = c(24, 37)) +
  scale_y_continuous(position = "right") +
  labs(
    x = NULL, 
    y = "° Celsius",
    caption = "Source: Charles Minard's 1869 chart"
  ) +
  theme_bw() +
  theme(
    text = element_text(family = "serif"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_blank(), 
    axis.ticks = element_blank(),
    panel.border = element_blank()
  )
plot_temp

```

```{r Napoleon’s march Consolidate plots}
# Combine the plots (heights are greater for troop_city)
grid.arrange(plot_troops_cities, plot_temp, nrow = 2, heights = c(3.5, 1.2))
# Add Border on Graphic
grid.rect(width = .99, height = .99, gp = gpar(lwd = 2, col = "gray", fill = NA))
```

### Response

The project is truly inspired by the plot from shakir-flash\[1\]. For my recreation of Charles Minard's 1869 chart, I separated each layer(or "plot") into three chunks. Each chunk is a layer that is later consolidated in the last chunk labeled "Consolidate plots". The first chunk creates the routes of the troop movements. The second chunk identifies labels and points for the cities, and this is overlaid with the first chunk "troop plot". The third chunk creates the plot that reflects the temperature (y-value) based on the longitude (x-value). The last chunk, "Consolidate plots", stacks the two graphs and showcases the final project. Styles for labeling and plotting were inspired by andrewheiss \[2\].

### Citation List

1.  https://github.com/shakir-flash/Napoleons-March-Minard-Visualization

This version of Napoleons March is 2 years old. The majority of my codes framework was received from this repository. Rather than copy/pasting the code, I used my own coding style to breakdown the plots into more intuitive sections.

2.  https://github.com/andrewheiss/fancy-minard

This versions of Napoleons March inspired me to change the formatting of the Temperature plot.
